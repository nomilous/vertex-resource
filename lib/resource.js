// Generated by CoffeeScript 1.6.3
var dirname, fs, local;

fs = require('fs');

dirname = require('path').dirname;

local = {
  sources: {},
  recurse: function(opts) {
    var error, path, recursing;
    if ('string' === typeof opts) {
      path = opts;
    }
    try {
      recursing = function(path, array, vertex, stack) {
        var error;
        if (stack == null) {
          stack = [];
        }
        try {
          return array.map(function(next) {
            var content, meta;
            path += '/' + next;
            stack.push(next);
            /* establish type is [file|dir]*/

            if (fs.lstatSync(path).isDirectory()) {
              vertex[next] || (vertex[next] = {});
              vertex[next].meta = {
                type: 'dir',
                path: path
              };
              recursing(path, fs.readdirSync(path), vertex[next], stack);
              path = dirname(path);
              return stack.pop();
            }
            /* files get a handler*/

            content = path.split('.').pop();
            if (path === content) {
              content = null;
            }
            meta = {
              type: 'file',
              path: path,
              content: content
            };
            vertex[next] = function(opts, callback) {
              var body;
              switch (meta.content) {
                case 'js':
                  body = fs.readFileSync(meta.path, 'utf8');
                  return callback(null, {
                    headers: {
                      'Content-Type': 'text/javascript'
                    },
                    body: body
                  });
              }
              return callback(null, {
                statusCode: 500,
                body: {
                  error: 'unsupported'
                }
              });
            };
            vertex[next].$www = {};
            vertex[next].meta = meta;
            path = dirname(path);
            return stack.pop();
          });
        } catch (_error) {
          error = _error;
          return console.log({
            e2: error
          });
        }
      };
      recursing(path, fs.readdirSync(path), local.sources);
      return local.sources;
    } catch (_error) {
      error = _error;
      return console.log({
        e1: error
      });
    }
  }
};

module.exports = function(opts) {
  var error, path, stat;
  if ('string' === typeof opts) {
    path = opts;
    try {
      stat = fs.lstatSync(path);
      if (stat.isDirectory()) {
        return local.recurse(path);
      }
    } catch (_error) {
      error = _error;
      return console.log(error);
    }
  }
};

module.exports._testInstance = local;
